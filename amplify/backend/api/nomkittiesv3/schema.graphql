# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Kitty @model {
  id: ID!
  name: String!
  color: String
  type: String
  
}

type User @model @auth(rules: [{ allow: owner }, {allow: private, operations:[read]} { allow: public, operations: [read] }]) {
  id: ID!
  name: String! 
  color: String
  type: String
  room: Room @hasOne
  owner: String! @index(name: "owner")
}

type Room @model @auth(rules: [{ allow: owner }, 
  { allow: private, operations: [read, update] },
{ allow: public, operations: [read] }]) 

{
  id: ID! @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  public: String @index(name: "public", sortKeyFields: ["createdAt"])  @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  mode: String @index(name: "mode") @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  rounds: Int @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  timeLimit: Int @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  currentPlayers: Int  @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  roomLimit: Int @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  inGame: Boolean @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  status: RoomStatus! @index(name: "status") @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  full: Boolean @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  createdAt: AWSDateTime @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  playing: [String] @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  players: [String] @auth(rules: [{ allow: owner },  { allow: private, operations: [read, update] },{ allow: public, operations: [read] }]) 
  tempPlayers: [String] @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  simpleCode: String @index(name: "simpleCode") @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  host: User @belongsTo(fields: ["hostID"]) @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  hostID: ID! @index(name: "hostID") @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  currentRound: Int @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  updatedAt: AWSDateTime @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
  gameData: GameData @hasOne @auth(rules: [{ allow: owner },  { allow: private, operations: [read] },{ allow: public, operations: [read] }]) 
}

enum RoomStatus {
  WAITING
  PLAYING
  FINISHED
  CANCELLED
}

type GameData @model @auth(rules: [
  { allow: owner },
  { allow: private, operations: [read] }
  { allow: public, operations: [read] }
]) {
  id: ID!
  roomID: ID! @index(name: "byRoom")
  activePlayers: [String]! # players actually in the game
  scores: AWSJSON # can store player scores as {playerId: score}
  currentRound: Int
  roundData: AWSJSON # store current round state
  lastUpdated: AWSDateTime
  gameStarted: AWSDateTime
  room: Room @belongsTo(fields: ["roomID"])
}

type TempPlayer @model @auth(rules: [
  { allow: public}
]) {
  id: ID!
  playerID: String!
  playerName: String
  color: String
  type: String
}


type Message @model @auth(rules: [
  { allow: owner },
  { allow: private, operations: [read] },
  { allow: public, operations: [read] }
]) {
  id: ID!
  roomID: ID! @index(name: "byRoom", sortKeyFields: ["createdAt"])
  content: String!
  playerID: String!
  playerName: String
  createdAt: AWSDateTime
  type: MessageType # For different message types (chat, system, etc.)
}


enum MessageType {
  CHAT
  SYSTEM
  GAME_EVENT
}

type Subscription {
  onCreateMessageByRoomID(roomID: ID!): Message @aws_subscribe(mutations: ["createMessage"])
  onMessageReceived(roomID: ID!): ChatMessage @aws_subscribe(mutations: ["sendChatMessage"]) # delete
}

type Mutation {
  joinRoom(roomID: ID!): Room #delete
  leaveRoom(roomID: ID!): Room
  updateGameState(roomID: ID!, gameData: GameStateInput!): Room
  
  sendChatMessage(roomID: ID!, message: String!, sender: String!, color: String!): ChatMessage #delete
}

type ChatMessage { # delete
  roomID: ID!
  message: String!
  sender: String!
  color: String!
  timestamp: AWSTimestamp!
}


input GameStateInput {
  currentRound: Int
  status: RoomStatus
  gameData: AWSJSON
}



